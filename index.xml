<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>poiu on poiu – Java Libraries</title><link>https://poiu-de.github.io/</link><description>Recent content in poiu on poiu – Java Libraries</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://poiu-de.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Annotations</title><link>https://poiu-de.github.io/coat/user_guide/01_annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/01_annotations/</guid><description>Coat provides three annotations, a type-level annotation @Coat.Config and two method-level annotations @Coat.Param and @Coat.Embedded.
The type-level annotation is mandatory. It is the indicator for the annotation processor which interfaces need to be proceessed.
@Coat.Param and @Coat.Embedded are mutually exclusive.
@Coat.Config Each interface that should be processed by the annotation processor must be annotated with @Coat.Config.
The generated class will always be generated in the same package as the annotated interface.</description></item><item><title>Commands</title><link>https://poiu-de.github.io/kilt/user_guide/01_commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/user_guide/01_commands/</guid><description>Kilt provides the following commands:
export-xls Exports the translations in Java i18n resource bundle files into an XLS(X) file.
import-xls Imports the translations from an XLS(X) file back into the Java i18n resource bundle files.
create-facade Creates the I18n enum facades for type safe access to localized messages.
reformat Reformat resource bundle files (and actually any .properties files) to a defined format.
reorder Reorder the entries in resource bundle files (and actually any .</description></item><item><title>Prerequisites</title><link>https://poiu-de.github.io/coat/quick_start/01_prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/quick_start/01_prerequisites/</guid><description>Coat has no runtime dependencies on other libraries.
The annotation processor has some dependencies on other libraries (which is why it is recommended to use maven as it resolves those dependencies automatically), but none of them are needed at runtime.
Coat can be used with Java 11 or higher.</description></item><item><title>Prerequisites</title><link>https://poiu-de.github.io/kilt/quick_start/01_prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/quick_start/01_prerequisites/</guid><description>Basic prerequisites Java 8 or higher To be integrated into an ant build script When using Java 8 to 10:
Apache ant 1.8.1 or higher When using Java 11+:
Apache ant 1.10.6 or higher 1 To be integrated into a maven build Apache maven 3.0.3 or higher Older version of ant can be used by exporting the environment variable ANT_OPTS=&amp;quot;-Djdk.util.jar.enableMultiRelease=force&amp;quot;&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>What is Apron</title><link>https://poiu-de.github.io/apron/user_guide/01_what_is_apron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/01_what_is_apron/</guid><description>Apron is a small library for reading and writing Java .properties files. The main goal of this library is to be compatible with the java.util.Properties class. Not API-wise (the API is quite different), but being able to read every Java .properties file and getting exactly the same key-value pairs as java.util.Properties does.
However Apron maintains the order of the entries in the properties files and also the comments, blank lines and whitespace before keys and around separators.</description></item><item><title>Installation</title><link>https://poiu-de.github.io/coat/quick_start/02_installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/quick_start/02_installation/</guid><description>Coat consists of two separate jars.
The annotation processor to generate the config classes. Only needed at compile time. The runtime package containing the common base class for all generated config classes and the default type converters. Needed at runtime. To use Coat in a maven based project use the following maven coordinates:
1 &amp;lt;!-- Contains the converters and base classes. Needed at runtime. --&amp;gt; 2 &amp;lt;dependency&amp;gt; 3 &amp;lt;groupId&amp;gt;de.poiu.coat&amp;lt;/groupId&amp;gt; 4 &amp;lt;artifactId&amp;gt;coat-runtime&amp;lt;/artifactId&amp;gt; 5 &amp;lt;version&amp;gt;1.</description></item><item><title>Installation</title><link>https://poiu-de.github.io/kilt/quick_start/02_installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/quick_start/02_installation/</guid><description>Maven plugin To use the maven plugin of Kilt include the following plugin section in the pom of your project:
1 &amp;lt;build&amp;gt; 2 &amp;lt;plugins&amp;gt; 3 … 4 &amp;lt;plugin&amp;gt; 5 &amp;lt;groupId&amp;gt;de.poiu.kilt&amp;lt;/groupId&amp;gt; 6 &amp;lt;artifactId&amp;gt;kilt-maven-plugin&amp;lt;/artifactId&amp;gt; 7 &amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt; 8 &amp;lt;configuration&amp;gt; 9 … 10 &amp;lt;/configuration&amp;gt; 11 &amp;lt;executions&amp;gt; 12 &amp;lt;execution&amp;gt; 13 &amp;lt;id&amp;gt;i18n-facade-generation&amp;lt;/id&amp;gt; 14 &amp;lt;goals&amp;gt; 15 &amp;lt;goal&amp;gt;create-facade&amp;lt;/goal&amp;gt; 16 &amp;lt;/goals&amp;gt; 17 &amp;lt;/execution&amp;gt; 18 &amp;lt;/executions&amp;gt; 19 &amp;lt;/plugin&amp;gt; 20 … 21 &amp;lt;plugins&amp;gt; 22 &amp;lt;build&amp;gt; See the Kilt User Guide for a detailed description of the available goals and configuration parameters.</description></item><item><title>Nesting Configurations</title><link>https://poiu-de.github.io/coat/user_guide/02_nesting_configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/02_nesting_configurations/</guid><description>Coat allows embedding config objects in other config objects.
It is helpful in the case when parts of a configuration are reused in multiple other configurations without having to duplicate all the accessor methods of the embedded config class.
Example As an example see the following MqttConfig that is embedded in the main AppConfig.
1@Coat.Config 2public interface MqttConfig { 3 4 @Coat.Param(key = &amp;#34;client_id&amp;#34;) 5 public Optional&amp;lt;String&amp;gt; clientId(); 6 7 @Coat.</description></item><item><title>Parameters</title><link>https://poiu-de.github.io/kilt/user_guide/02_parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/user_guide/02_parameters/</guid><description>Kilt supports the following parameters that can be set in the configuration files for the standalone tool and the ant task and in the plugin configuration of the maven plugin.
All parameters can additionally be given as command line parameters to override the configuration for the standalone tool and the maven plugin. The parameters of the ant task can not be overridden.
The following list describes the available parameters and to which commands they apply.</description></item><item><title>What can Apron be used for</title><link>https://poiu-de.github.io/apron/user_guide/02_what_can_apron_be_used_for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/02_what_can_apron_be_used_for/</guid><description>Some examples for usage scenarios of Apron are:
Using .properties files as config files for an application that may be manually edited by a user as well as modified by the application itself (e.g. via a configuration dialog). The manual modifications (like the order of entries, as well as comments, empty lines and even the formatting of entries) will remain.
Exporting and importing Java i18n resource bundles for translation (like Kilt does).</description></item><item><title>Basic Usage</title><link>https://poiu-de.github.io/apron/user_guide/03_basic_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/03_basic_usage/</guid><description>The main important class in Apron is de.poiu.apron.PropertyFile. It provides methods to create a new instance by reading a .properties file from File or InputStream as well as methods for populating an instance programmatically.
The main difference to the usual java.util.Properties is that this class does not implement the java.util.Map interface and provides access to the content of the PropertyFile in two different ways:
as key-value pairs
as Entries
The key-value pairs are the actual interesting content of the .</description></item><item><title>Usage</title><link>https://poiu-de.github.io/coat/quick_start/03_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/quick_start/03_usage/</guid><description>Create config interface Write an interface with accessor methods for each config entry your application supports. The accessor methods can return the concrete types you want your config entry to be. There is a number of types that are supported by default, but custom types can be registered to support additional types.
Config values that are optional, must be of type java.util.Optional or the more specialized variants OptionalInt, OptionalLong or OptionalDouble.</description></item><item><title>Usage</title><link>https://poiu-de.github.io/kilt/quick_start/03_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/quick_start/03_usage/</guid><description>Kilt can be used in three different ways.
As a standalone application
As an ant task
As a maven plugin
Standalone tool To use Kilt as a standalone tool, download and unpack the kilt-cli package from the Download page.
It contains a shell script for Linux, a batch file for Windows and a kilt.properties file for the configuration.
To execute the tool run
./kilt.sh &amp;lt;command&amp;gt; on Linux or
kilt.bat &amp;lt;command&amp;gt; on Windows.</description></item><item><title>Validation</title><link>https://poiu-de.github.io/coat/user_guide/03_validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/03_validation/</guid><description>Coat validation The generated config class allows the validation of the configuration with the method validate(). This can be used to fail early in case the given configuration is missing some values or existing values cannot be converted into the specified type.
If the configuration is valid this method just returns.
If the configuration is invalid, it will throw a ConfigValidationException. This exception has a method getValidationResult() that returns a value of type ValidationResult that contains more information about the missing or wrong config values.</description></item><item><title>Supported Types</title><link>https://poiu-de.github.io/coat/user_guide/04_supported_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/04_supported_types/</guid><description>Builtin types The following types are supported by Coat out of the box and can directly be used as return types of the accessor methods in the annotated interface.
java.lang.Integer java.lang.Long java.lang.Float java.lang.Double java.lang.String java.time.Duration java.time.LocalDate java.time.LocalDateTime java.time.LocalTime java.io.File java.nio.file.Path java.nio.charset.Charset java.net.InetAddress java.security.MessageDigest For each supported type a converter class exists in the package de.poiu.coat.convert. Refer to the corresponding Java API docs for details about the expected format of the input string.</description></item><item><title>Example config</title><link>https://poiu-de.github.io/coat/user_guide/05_example_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/05_example_config/</guid><description>Example config file generation The annotation processor generates an example config file (conforming to the specification of Java .properties files) for each annotated interface. That example contains an entry for each accessor method.
If an accessor method is optional, the entry in the example will be commented out.
If an accessor method provides a default value for a property, the entry in the example will be commented out and the default value is assigned.</description></item><item><title>Reformatting and Reordering</title><link>https://poiu-de.github.io/apron/user_guide/05_reformatting_and_reordering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/05_reformatting_and_reordering/</guid><description>Since version 2.0.0 Apron provides a de.poiu.apron.reformatting.Reformatter class that allows reformatting and reordering the content of .properties files.
The specific behaviour when reformatting and reordering can be specified via a de.poiu.apron.reformatting.ReformatOptions object.
For convenience the de.poiu.apron.PropertyFile class provides some methods to reformat or reorder the entries in that PropertyFile.
Reformatting When reformatting a format string can be given to specify how to format leading whitespace, separators and line endings. The default format string is &amp;lt;key&amp;gt; = &amp;lt;value&amp;gt;\n for</description></item><item><title>API reference</title><link>https://poiu-de.github.io/coat/user_guide/06_api_reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/06_api_reference/</guid><description>The javadoc for the public classes is published online.
See coat-processor for a description of the annotations and coat-runtime for a description of the base class for the generated config files and the default converters.</description></item><item><title>java.util.Properties wrapper</title><link>https://poiu-de.github.io/apron/user_guide/06_jup_wrapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/06_jup_wrapper/</guid><description>Since version 2.1.0 Apron provides a de.poiu.apron.java.util.Properties class as a wrapper to be used as a drop-in replacement where a java.util.Properties object is required.
This wrapper derives from java.util.Properties, but uses an Apron PropertyFile as the actual implementation.
Example To use it create it either via
1de.poiu.apron.PropertyFile propertyFile= … 2de.poiu.apron.java.util.Properties properties= 3 new de.poiu.apron.java.util.Properties(propertyFile); or via
1de.poiu.apron.PropertyFile propertyFile= … 2de.poiu.apron.java.util.Properties properties= propertyFile.asProperties(); All access via the properties object will then access to the propertyFile object.</description></item><item><title>Logging</title><link>https://poiu-de.github.io/apron/user_guide/07_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/07_logging/</guid><description>There are a few cases this library issues some logging statements (when closing a writer didn’t succeed and if an invalid unicode sequence was found that will be left as is). Those few logging statements don’t justify a dependency on a logging framework. Therefore we just use java.util.logging for that purpose.
When using Apron in an application that uses another logging framework please use those logging frameworks ability to bridge java.</description></item><item><title>Logging</title><link>https://poiu-de.github.io/coat/user_guide/07_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/user_guide/07_logging/</guid><description>In some cases Coat issues logging statements. To not introduce a third-party dependency just for that case, the java.lang.System.Logger is used for that purpose. By default this uses java.util.logging as the actual logging implementation, but can be reconfigured to use a different implementation.
For example to log via log4j2 the maven artifact org.apache.logging.log4j:log4j-jpl must be specified as a dependency:
1 &amp;lt;dependency&amp;gt; 2 &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; 3 &amp;lt;artifactId&amp;gt;log4j-jpl&amp;lt;/artifactId&amp;gt; 4 &amp;lt;version&amp;gt;${log4j-version}&amp;lt;/version&amp;gt; 5 &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; 6 &amp;lt;/dependency&amp;gt; For slf4j the maven artifact slf4j-jdk-platform-logging must be specified as a dependency:</description></item><item><title>0.0.1</title><link>https://poiu-de.github.io/coat/release_notes/0.0.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/release_notes/0.0.1/</guid><description>First public release.</description></item><item><title>0.0.2</title><link>https://poiu-de.github.io/coat/release_notes/0.0.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/release_notes/0.0.2/</guid><description>CoatConfig#validate() now checks whether config values can be converted to their corresponding type.
The generated config classes now provide a method writeExampleConfig to write an example config (in a syntax valid for Java .properties files) to a provided Writer.
The annotation processor now generates an example .properties file for each annotated interface.
The annotation processor now adds an equals() and hashCode() method to each generated class.
A new annotation @Coat.</description></item><item><title>0.0.3</title><link>https://poiu-de.github.io/coat/release_notes/0.0.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/release_notes/0.0.3/</guid><description>Use java.lang.System.Logger instead of java.util.logging.Logger in CoatConfig.
Correctly handle inherited accessor methods from multiple interfaces.
Accessor methods that are totally equal will only be generated once. Accessor methods that have the same name, but are otherwise not totally equal (e.g. differing return type or differing default value) prevent the generation.
Check that the same key is not used for different accessor methods.
Don’t try to generate a config from an interface which has methods that return void or accept parameters (as they can’t be used as accessors).</description></item><item><title>0.0.4</title><link>https://poiu-de.github.io/coat/release_notes/0.0.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/release_notes/0.0.4/</guid><description>The @Coat.Param annotation is now optional. All methods in an interface with the @Coat.Config annotation are now considered. The “key” will be inferred from the accessor method name if missing.
To influence the style of the inferred keys a CasingStrategy can be specified.
Arrays and Collection types are now supported.
Converters are provided for “boxed” primitives now.
Converters can be specified declaratively on the annotation level now (on @Coat.Config and @Coat.</description></item><item><title>0.2.0</title><link>https://poiu-de.github.io/kilt/release_notes/0.2.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/release_notes/0.2.0/</guid><description>Initial release of kilt after fork from i18n-binder
Totally new facade generation that generates enum facades
Renamed commands and parameters
Update XLS(X) files instead of overwriting them
Empty cells in XLS(X) and default resource bundles (without country code) are now supported
Added kilt-cli as commandline application without dependency on ant
Added kilt-runtime as runtime module for the generated facades (and even without a generated facade)</description></item><item><title>0.3.0</title><link>https://poiu-de.github.io/kilt/release_notes/0.3.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/release_notes/0.3.0/</guid><description>Mark default language column in XLS(X) with &amp;lt;default&amp;gt;
Get rid of dependency on utils-apl-derived and use PropertyFile from apron library instead
Implemented functionality to comment out or delete missing keys when importing XLS(X) back to .properties files
Add an additional info sheet to the written XLS(X) with some infos about the generation</description></item><item><title>0.3.1</title><link>https://poiu-de.github.io/kilt/release_notes/0.3.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/release_notes/0.3.1/</guid><description>Upgrade Apron library to 2.0.1 to benefit from bugfixes:
Escape newlines to literal newlines
Updating a PropertyFile updates values even if the unescaped form doesn’t differ
An escaped literal newline is replaced with a newline</description></item><item><title>1.0.0</title><link>https://poiu-de.github.io/apron/release_notes/1.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/release_notes/1.0.0/</guid><description> Initial release of Apron</description></item><item><title>1.0.0</title><link>https://poiu-de.github.io/coat/release_notes/1.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat/release_notes/1.0.0/</guid><description>A new ListParser is provided for specifying comma-separated lists (ignoring whitespace around the commas). This CommaSeparatedListParser will not be used by default, but must explicitly be set on a @Coat.Config or @Coat.Param annotation or via CoatConfig#registerListParser(ListParser).
BREAKING CHANGE: The generated immutable config files will not have a public constructor anymore. Instead a builder will be generated to create config objects as well as static from(…) factory methods.
A config class can now be initialized via multiple config sources at once.</description></item><item><title>1.0.0</title><link>https://poiu-de.github.io/kilt/release_notes/1.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/release_notes/1.0.0/</guid><description>base Provide new commands to reformat and reorder resource bundles
Write a few more log messages
Provide example application to show usage of Kilt
xls-import / xls-export Avoid error on values without key
Avoid errors when reading XLS(X) files with null values
Do not create empty files on xls-import
Maintain order of entries on xls-export
xls-import now respects i18nInclude and i18nExclude properties
create-facade I18n facade now provides #contains() method
I18n facade now provides #getOrDefault() method</description></item><item><title>1.0.1</title><link>https://poiu-de.github.io/kilt/release_notes/1.0.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/release_notes/1.0.1/</guid><description>base Fix bundle basename for bundles not in subfolder</description></item><item><title>1.0.2</title><link>https://poiu-de.github.io/kilt/release_notes/1.0.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/kilt/release_notes/1.0.2/</guid><description> Update all 3rd-party dependencies (no functional changes)</description></item><item><title>2.0.0</title><link>https://poiu-de.github.io/apron/release_notes/2.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/release_notes/2.0.0/</guid><description>Added functionality to reformat and reorder the entries in a PropertyFile
Renamed de.poiu.apron.Options to de.poiu.apron.ApronOptions</description></item><item><title>2.0.1</title><link>https://poiu-de.github.io/apron/release_notes/2.0.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/release_notes/2.0.1/</guid><description>Escape newlines to literal newlines
When checking for value changes compare unescaped values
Escape backslashes when escaping</description></item><item><title>2.1.0</title><link>https://poiu-de.github.io/apron/release_notes/2.1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/release_notes/2.1.0/</guid><description>Provide JPMS module-info to be used in JPMS modularized applications The module-info will only be used by Java 9+. All other classes are still compatible with Java 8.
Provide java.util.Properties wrapper around PropertyFile
Make appendEntry methods public
Replace setValue method with set. setValue still exists, but is deprecated from now on.</description></item><item><title>Search</title><link>https://poiu-de.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/search/</guid><description/></item></channel></rss>