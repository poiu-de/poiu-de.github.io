<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>User Guide on poiu – Java Libraries</title><link>https://poiu-de.github.io/apron/user_guide/</link><description>Recent content in User Guide on poiu – Java Libraries</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://poiu-de.github.io/apron/user_guide/index.xml" rel="self" type="application/rss+xml"/><item><title>What is Apron</title><link>https://poiu-de.github.io/apron/user_guide/01_what_is_apron/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/01_what_is_apron/</guid><description>Apron is a small library for reading and writing Java .properties files. The main goal of this library is to be compatible with the java.util.Properties class. Not API-wise (the API is quite different), but being able to read every Java .properties file and getting exactly the same key-value pairs as java.util.Properties does.
However Apron maintains the order of the entries in the properties files and also the comments, blank lines and whitespace before keys and around separators.</description></item><item><title>What can Apron be used for</title><link>https://poiu-de.github.io/apron/user_guide/02_what_can_apron_be_used_for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/02_what_can_apron_be_used_for/</guid><description>Some examples for usage scenarios of Apron are:
Using .properties files as config files for an application that may be manually edited by a user as well as modified by the application itself (e.g. via a configuration dialog). The manual modifications (like the order of entries, as well as comments, empty lines and even the formatting of entries) will remain.
Exporting and importing Java i18n resource bundles for translation (like Kilt does).</description></item><item><title>Basic Usage</title><link>https://poiu-de.github.io/apron/user_guide/03_basic_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/03_basic_usage/</guid><description>The main important class in Apron is de.poiu.apron.PropertyFile. It provides methods to create a new instance by reading a .properties file from File or InputStream as well as methods for populating an instance programmatically.
The main difference to the usual java.util.Properties is that this class does not implement the java.util.Map interface and provides access to the content of the PropertyFile in two different ways:
as key-value pairs
as Entries
The key-value pairs are the actual interesting content of the .</description></item><item><title>Reformatting and Reordering</title><link>https://poiu-de.github.io/apron/user_guide/05_reformatting_and_reordering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/05_reformatting_and_reordering/</guid><description>Since version 2.0.0 Apron provides a de.poiu.apron.reformatting.Reformatter class that allows reformatting and reordering the content of .properties files.
The specific behaviour when reformatting and reordering can be specified via a de.poiu.apron.reformatting.ReformatOptions object.
For convenience the de.poiu.apron.PropertyFile class provides some methods to reformat or reorder the entries in that PropertyFile.
Reformatting When reformatting a format string can be given to specify how to format leading whitespace, separators and line endings. The default format string is &amp;lt;key&amp;gt; = &amp;lt;value&amp;gt;\n for</description></item><item><title>java.util.Properties wrapper</title><link>https://poiu-de.github.io/apron/user_guide/06_jup_wrapper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/06_jup_wrapper/</guid><description>Since version 2.1.0 Apron provides a de.poiu.apron.java.util.Properties class as a wrapper to be used as a drop-in replacement where a java.util.Properties object is required.
This wrapper derives from java.util.Properties, but uses an Apron PropertyFile as the actual implementation.
Example To use it create it either via
1de.poiu.apron.PropertyFile propertyFile= … 2de.poiu.apron.java.util.Properties properties= 3 new de.poiu.apron.java.util.Properties(propertyFile); or via
1de.poiu.apron.PropertyFile propertyFile= … 2de.poiu.apron.java.util.Properties properties= propertyFile.asProperties(); All access via the properties object will then access to the propertyFile object.</description></item><item><title>Logging</title><link>https://poiu-de.github.io/apron/user_guide/07_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/apron/user_guide/07_logging/</guid><description>There are a few cases this library issues some logging statements (when closing a writer didn’t succeed and if an invalid unicode sequence was found that will be left as is). Those few logging statements don’t justify a dependency on a logging framework. Therefore we just use java.util.logging for that purpose.
When using Apron in an application that uses another logging framework please use those logging frameworks ability to bridge java.</description></item></channel></rss>